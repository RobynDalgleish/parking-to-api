plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.micronaut.application" version "1.2.0"
    id "com.intershop.gradle.javacc" version "4.0.0"
}

version = "0.1.0"
group = "to.parking"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("to.parking.*")
    }
}

dependencies {
    annotationProcessor(
            "org.projectlombok:lombok",
            "io.micronaut.openapi:micronaut-openapi",
    )
    compileOnly(
            "org.projectlombok:lombok"
    )
    implementation(
            "io.micronaut:micronaut-validation",
            "io.micronaut:micronaut-runtime",
            "javax.annotation:javax.annotation-api",
            "io.micronaut:micronaut-http-client",
            "io.swagger.core.v3:swagger-annotations",
            "io.micronaut:micronaut-management",
            "io.micronaut.elasticsearch:micronaut-elasticsearch",
            "io.micronaut.reactor:micronaut-reactor",
            "com.opencsv:opencsv:5.3",
            "com.fasterxml.jackson.module:jackson-modules-java8:2.12.0"
    )
    runtimeOnly(
            "ch.qos.logback:logback-classic"
    )
    testAnnotationProcessor(
            "org.projectlombok:lombok"
    )
    testCompileOnly(
            "org.projectlombok:lombok"
    )
    testImplementation(
            "org.testcontainers:testcontainers:1.15.0",
            "org.testcontainers:junit-jupiter:1.15.0",
            "org.testcontainers:elasticsearch:1.15.0",
            "org.assertj:assertj-core:3.9.0",
            "org.junit.jupiter:junit-jupiter-params",
            "org.mockito:mockito-core:2.23.4",
            "org.mockito:mockito-junit-jupiter:2.23.4",
            "org.awaitility:awaitility:4.0.3",
    )
}

application {
    mainClass.set("to.parking.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("14")
    targetCompatibility = JavaVersion.toVersion("14")
}

processResources {
    filesMatching("**/**.yml") {
        expand(project.properties)
    }
}

javacc {
    javaCCVersion = '7.0.5'
    configs {
        validTimeParser {
            inputFile = file('src/main/javacc/ValidTimeParser.jj')
            packageName = 'to.parking.core.parsing'
        }
    }
}